# This is generated by configure.py- don't edit it directly!

builddir = ./build

cc_flags = -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 --std=gnu11 $
    --specs=nano.specs -mthumb -mabi=aapcs -funsigned-char $
    -funsigned-bitfields -fshort-enums -fdata-sections -ffunction-sections $
    -fdiagnostics-color=always -Wno-unused-parameter -Wno-unused-variable $
    -W -Wall -Wextra -Werror -Wshadow -Wdouble-promotion -Wformat=2 -Wundef $
    -Wstack-usage=65536 -ggdb3 -Og
c_flags = -std=gnu17 -x c
cxx_flags = -std=gnu++17 -x c++

cc_includes = -Ithird_party/samd51a/include -Ithird_party/cmsis/include $
    -Ithird_party/wren/include -Ithird_party/libwinter/samd $
    -Ithird_party/tinyusb/src/portable/microchip/samd $
    -Ithird_party/samd51a/gcc -Ithird_party/libwinter -Isrc/hw -Isrc $
    -Ithird_party/printf -Ithird_party/tinyusb/src/common -Ithird_party/rtt $
    -Ithird_party/tinyusb/src/device -Isrc/drivers -Ibuild -Isrc/lib $
    -Ithird_party/tinyusb/src -Ithird_party/tinyusb/src/class/midi

cc_defines = -D__SAMD51J20A__=1 -DSAMD51=1 -DARM_MATH_CM4=1 $
    -DCFG_TUSB_MCU=OPT_MCU_SAMD51 -DDEBUG=1

ld_flags = -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 --std=gnu11 $
    --specs=nano.specs -mthumb -mabi=aapcs -funsigned-char $
    -funsigned-bitfields -fshort-enums -fdata-sections -ffunction-sections $
    -fdiagnostics-color=always -Wno-unused-parameter -Wno-unused-variable $
    -Wl,--gc-sections -Wl,-Map=$builddir/link.map $
    -Wl,--script=scripts/SAMD51J20A.ld -Wl,--defsym=__stack_size__=65536

ld_libraries = -lm

rule cc
  command = arm-none-eabi-gcc $cc_flags $c_flags $cc_includes $cc_defines $
      -MMD -MT $out -MF $out.d -c $in -o $out
  description = Compile (C) $in
  depfile = $out.d
  deps = gcc

rule cxx
  command = arm-none-eabi-gcc $cc_flags $cxx_flags $cc_includes $cc_defines $
      -MMD -MT $out -MF $out.d -c $in -o $out
  description = Compile (C++) $in
  depfile = $out.d
  deps = gcc

rule ld
  command = arm-none-eabi-gcc $ld_flags $in $ld_libraries -o $out
  description = Link $out

rule elf_to_bin
  command = arm-none-eabi-objcopy -O binary $in $out
  description = Create $out

rule bin_to_uf2
  command = python3 -m wintertools.bin_to_uf2 $in $out
  description = Create $out


rule runcmd_arg_in
  command = $cmd $in $append
  description = $desc $in

rule runcmd_arg_in_shh
  command = $cmd $in $append
  description = $desc

rule runcmd_arg_out
  command = $cmd $out $append
  description = $desc $out

rule structy
  command = python3 -m structy_generator -l $lang $in $dest
  description = Structy generate ($lang) $in -> $dest
rule clang_format
  command = clang-format -i $in && touch $out
  description = Format $in

rule clang_tidy
  command = clang-tidy $srcs $args -- $cc_includes $cc_defines
  description = Tidy

build $builddir/src/main.o: cc src/main.c

build $builddir/src/stel_usb_descriptors.o: cc src/stel_usb_descriptors.c

build $builddir/src/drivers/stel_adc.o: cc src/drivers/stel_adc.c

build $builddir/src/drivers/stel_dac.o: cc src/drivers/stel_dac.c

build $builddir/src/drivers/stel_adg1414.o: cc src/drivers/stel_adg1414.c

build $builddir/src/drivers/stel_dotstar.o: cc src/drivers/stel_dotstar.c

build $builddir/src/drivers/stel_ad5685.o: cc src/drivers/stel_ad5685.c

build $builddir/src/hw/system_samd51.o: cc src/hw/system_samd51.c

build $builddir/src/hw/stel_sercom_spi.o: cc src/hw/stel_sercom_spi.c

build $builddir/src/hw/stel_clocks.o: cc src/hw/stel_clocks.c

build $builddir/src/hw/stel_usb.o: cc src/hw/stel_usb.c

build $builddir/src/hw/stel_sercom.o: cc src/hw/stel_sercom.c

build $builddir/src/lib/stel_syscalls.o: cc src/lib/stel_syscalls.c

build $builddir/build/generated_build_info.o: cc build/generated_build_info.c

build $builddir/third_party/libwinter/wntr_assert.o: cc $
    third_party/libwinter/wntr_assert.c

build $builddir/third_party/libwinter/wntr_bitbang_spi.o: cc $
    third_party/libwinter/wntr_bitbang_spi.c

build $builddir/third_party/libwinter/wntr_colorspace.o: cc $
    third_party/libwinter/wntr_colorspace.c

build $builddir/third_party/libwinter/wntr_deque.o: cc $
    third_party/libwinter/wntr_deque.c

build $builddir/third_party/libwinter/wntr_midi_core.o: cc $
    third_party/libwinter/wntr_midi_core.c

build $builddir/third_party/libwinter/wntr_midi_sysex_dispatcher.o: cc $
    third_party/libwinter/wntr_midi_sysex_dispatcher.c

build $builddir/third_party/libwinter/wntr_random.o: cc $
    third_party/libwinter/wntr_random.c

build $builddir/third_party/libwinter/wntr_ticks.o: cc $
    third_party/libwinter/wntr_ticks.c

build $builddir/third_party/libwinter/samd/wntr_mtb.o: cc $
    third_party/libwinter/samd/wntr_mtb.c

build $builddir/third_party/libwinter/samd/wntr_bootloader.o: cc $
    third_party/libwinter/samd/wntr_bootloader.c

build $builddir/third_party/libwinter/samd/wntr_gpio.o: cc $
    third_party/libwinter/samd/wntr_gpio.c

build $builddir/third_party/libwinter/samd/wntr_delay.o: cc $
    third_party/libwinter/samd/wntr_delay.c

build $builddir/third_party/libwinter/samd/wntr_serial_number.o: cc $
    third_party/libwinter/samd/wntr_serial_number.c

build $builddir/third_party/libwinter/samd/wntr_hardfault.o: cc $
    third_party/libwinter/samd/wntr_hardfault.c

build $builddir/third_party/samd51a/gcc/startup_samd51.o: cc $
    third_party/samd51a/gcc/startup_samd51.c

build $builddir/third_party/printf/printf.o: cc third_party/printf/printf.c

build $builddir/third_party/rtt/SEGGER_RTT.o: cc third_party/rtt/SEGGER_RTT.c

build $builddir/third_party/tinyusb/src/tusb.o: cc $
    third_party/tinyusb/src/tusb.c

build $builddir/third_party/tinyusb/src/class/midi/midi_device.o: cc $
    third_party/tinyusb/src/class/midi/midi_device.c

build $builddir/third_party/tinyusb/src/common/tusb_fifo.o: cc $
    third_party/tinyusb/src/common/tusb_fifo.c

build $builddir/third_party/tinyusb/src/device/usbd.o: cc $
    third_party/tinyusb/src/device/usbd.c

build $builddir/third_party/tinyusb/src/device/usbd_control.o: cc $
    third_party/tinyusb/src/device/usbd_control.c

build $builddir/third_party/tinyusb/src/portable/microchip/samd/dcd_samd.o: $
    cc third_party/tinyusb/src/portable/microchip/samd/dcd_samd.c

build build/stellar-firmware.elf: ld $builddir/src/main.o $
    $builddir/src/stel_usb_descriptors.o $builddir/src/drivers/stel_adc.o $
    $builddir/src/drivers/stel_dac.o $builddir/src/drivers/stel_adg1414.o $
    $builddir/src/drivers/stel_dotstar.o $
    $builddir/src/drivers/stel_ad5685.o $builddir/src/hw/system_samd51.o $
    $builddir/src/hw/stel_sercom_spi.o $builddir/src/hw/stel_clocks.o $
    $builddir/src/hw/stel_usb.o $builddir/src/hw/stel_sercom.o $
    $builddir/src/lib/stel_syscalls.o $
    $builddir/build/generated_build_info.o $
    $builddir/third_party/libwinter/wntr_assert.o $
    $builddir/third_party/libwinter/wntr_bitbang_spi.o $
    $builddir/third_party/libwinter/wntr_colorspace.o $
    $builddir/third_party/libwinter/wntr_deque.o $
    $builddir/third_party/libwinter/wntr_midi_core.o $
    $builddir/third_party/libwinter/wntr_midi_sysex_dispatcher.o $
    $builddir/third_party/libwinter/wntr_random.o $
    $builddir/third_party/libwinter/wntr_ticks.o $
    $builddir/third_party/libwinter/samd/wntr_mtb.o $
    $builddir/third_party/libwinter/samd/wntr_bootloader.o $
    $builddir/third_party/libwinter/samd/wntr_gpio.o $
    $builddir/third_party/libwinter/samd/wntr_delay.o $
    $builddir/third_party/libwinter/samd/wntr_serial_number.o $
    $builddir/third_party/libwinter/samd/wntr_hardfault.o $
    $builddir/third_party/samd51a/gcc/startup_samd51.o $
    $builddir/third_party/printf/printf.o $
    $builddir/third_party/rtt/SEGGER_RTT.o $
    $builddir/third_party/tinyusb/src/tusb.o $
    $builddir/third_party/tinyusb/src/class/midi/midi_device.o $
    $builddir/third_party/tinyusb/src/common/tusb_fifo.o $
    $builddir/third_party/tinyusb/src/device/usbd.o $
    $builddir/third_party/tinyusb/src/device/usbd_control.o $
    $builddir/third_party/tinyusb/src/portable/microchip/samd/dcd_samd.o

build build/stellar-firmware.bin: elf_to_bin build/stellar-firmware.elf

build build/stellar-firmware.uf2: bin_to_uf2 build/stellar-firmware.bin

build size.phony: runcmd_arg_in $builddir/stellar-firmware.elf
  cmd = python3 -m wintertools.fw_size --flash-size 1048576 --ram-size 262144
  desc = Size

build size: phony size.phony

build $builddir/generated_build_info.c: runcmd_arg_out  | $
    build_info_always.phony
  cmd = python3 -m wintertools.build_info --config debug
  desc = Generate build info

build build_info_always.phony: phony

build $builddir/format/src/stel.h: clang_format src/stel.h

build $builddir/format/src/stel_config.h: clang_format src/stel_config.h

build $builddir/format/src/main.c: clang_format src/main.c

build $builddir/format/src/tusb_config.h: clang_format src/tusb_config.h

build $builddir/format/src/stel_usb_descriptors.c: clang_format $
    src/stel_usb_descriptors.c

build $builddir/format/src/drivers/stel_dotstar.h: clang_format $
    src/drivers/stel_dotstar.h

build $builddir/format/src/drivers/stel_adg1414.h: clang_format $
    src/drivers/stel_adg1414.h

build $builddir/format/src/drivers/stel_ad5685.h: clang_format $
    src/drivers/stel_ad5685.h

build $builddir/format/src/drivers/stel_adc.c: clang_format $
    src/drivers/stel_adc.c

build $builddir/format/src/drivers/stel_dac.c: clang_format $
    src/drivers/stel_dac.c

build $builddir/format/src/drivers/stel_adg1414.c: clang_format $
    src/drivers/stel_adg1414.c

build $builddir/format/src/drivers/stel_dotstar.c: clang_format $
    src/drivers/stel_dotstar.c

build $builddir/format/src/drivers/stel_dac.h: clang_format $
    src/drivers/stel_dac.h

build $builddir/format/src/drivers/stel_adc.h: clang_format $
    src/drivers/stel_adc.h

build $builddir/format/src/drivers/stel_ad5685.c: clang_format $
    src/drivers/stel_ad5685.c

build $builddir/format/src/hw/system_samd51.c: clang_format $
    src/hw/system_samd51.c

build $builddir/format/src/hw/stel_sercom_spi.c: clang_format $
    src/hw/stel_sercom_spi.c

build $builddir/format/src/hw/stel_clocks.c: clang_format src/hw/stel_clocks.c

build $builddir/format/src/hw/stel_usb.h: clang_format src/hw/stel_usb.h

build $builddir/format/src/hw/stel_sercom.h: clang_format src/hw/stel_sercom.h

build $builddir/format/src/hw/stel_sercom_spi.h: clang_format $
    src/hw/stel_sercom_spi.h

build $builddir/format/src/hw/stel_clocks.h: clang_format src/hw/stel_clocks.h

build $builddir/format/src/hw/stel_usb.c: clang_format src/hw/stel_usb.c

build $builddir/format/src/hw/stel_sercom.c: clang_format src/hw/stel_sercom.c

build $builddir/format/src/lib/stel_syscalls.c: clang_format $
    src/lib/stel_syscalls.c

build $builddir/format/src/lib/stel_math_utils.h: clang_format $
    src/lib/stel_math_utils.h

build format: phony | $builddir/format/src/stel.h $
    $builddir/format/src/stel_config.h $builddir/format/src/main.c $
    $builddir/format/src/tusb_config.h $
    $builddir/format/src/stel_usb_descriptors.c $
    $builddir/format/src/drivers/stel_dotstar.h $
    $builddir/format/src/drivers/stel_adg1414.h $
    $builddir/format/src/drivers/stel_ad5685.h $
    $builddir/format/src/drivers/stel_adc.c $
    $builddir/format/src/drivers/stel_dac.c $
    $builddir/format/src/drivers/stel_adg1414.c $
    $builddir/format/src/drivers/stel_dotstar.c $
    $builddir/format/src/drivers/stel_dac.h $
    $builddir/format/src/drivers/stel_adc.h $
    $builddir/format/src/drivers/stel_ad5685.c $
    $builddir/format/src/hw/system_samd51.c $
    $builddir/format/src/hw/stel_sercom_spi.c $
    $builddir/format/src/hw/stel_clocks.c $
    $builddir/format/src/hw/stel_usb.h $
    $builddir/format/src/hw/stel_sercom.h $
    $builddir/format/src/hw/stel_sercom_spi.h $
    $builddir/format/src/hw/stel_clocks.h $
    $builddir/format/src/hw/stel_usb.c $
    $builddir/format/src/hw/stel_sercom.c $
    $builddir/format/src/lib/stel_syscalls.c $
    $builddir/format/src/lib/stel_math_utils.h
configure_args = --config debug

rule configure
  command = /Users/stargirl/.pyenv/versions/3.9.7/bin/python3 configure.py $
      $configure_args
  description = Reconfigure with configure.py $configure_args
  generator = 1

build build.ninja: configure | configure.py
