# This is generated by configure.py- don't edit it directly!

builddir = ./build

cc_flags = -funsigned-char -fdiagnostics-color=always -Wno-unused-parameter $
    -Wno-unused-variable -W -Wall -Wextra -Werror -Wformat=2 -Wundef -ggdb3 $
    -Og
c_flags = -std=gnu17 -x c
cxx_flags = -std=gnu++17 -x c++

cc_includes = -I../src/lib -I../third_party/libwinter $
    -I../third_party/libwinter -I../src/currents -I../src/flow -Istubs -I.

cc_defines = -DDEBUG=1

ld_flags = -funsigned-char -fdiagnostics-color=always -Wno-unused-parameter $
    -Wno-unused-variable -std=gnu17 -lc++

ld_libraries = -lm -lsdl2 -lcairo -lrtmidi

rule cc
  command = clang $cc_flags $c_flags $cc_includes $cc_defines -MMD -MT $out $
      -MF $out.d -c $in -o $out
  description = Compile (C) $in
  depfile = $out.d
  deps = gcc

rule cxx
  command = clang $cc_flags $cxx_flags $cc_includes $cc_defines -MMD -MT $
      $out -MF $out.d -c $in -o $out
  description = Compile (C++) $in
  depfile = $out.d
  deps = gcc

rule ld
  command = clang $ld_flags $in $ld_libraries -o $out
  description = Link $out

rule elf_to_bin
  command = arm-none-eabi-objcopy -O binary $in $out
  description = Create $out

rule bin_to_uf2
  command = python3 -m wintertools.bin_to_uf2 $in $out
  description = Create $out


rule runcmd_arg_in
  command = $cmd $in $append
  description = $desc $in

rule runcmd_arg_in_shh
  command = $cmd $in $append
  description = $desc

rule runcmd_arg_out
  command = $cmd $out $append
  description = $desc $out

rule structy
  command = python3 -m structy_generator -l $lang $in $dest
  description = Structy generate ($lang) $in -> $dest
rule clang_format
  command = clang-format -i $in && touch $out
  description = Format $in

rule clang_tidy
  command = clang-tidy $srcs $args -- $cc_includes $cc_defines
  description = Tidy

build $builddir/gfx.o: cc gfx.c

build $builddir/main.o: cc main.c

build $builddir/midi_backend.o: cxx midi_backend.cpp

build $builddir/stubs/stub_wntr_midi.o: cc stubs/stub_wntr_midi.c

build $builddir/src/currents/currents.o: cc ../src/currents/currents.c

build $builddir/src/flow/generated_flow.o: cc ../src/flow/generated_flow.c

build $builddir/src/flow/flow_io.o: cc ../src/flow/flow_io.c

build $builddir/src/flow/flow_runner.o: cc ../src/flow/flow_runner.c

build $builddir/src/flow/flow_nodes.o: cc ../src/flow/flow_nodes.c

build $builddir/third_party/libwinter/wntr_deque.o: cc $
    ../third_party/libwinter/wntr_deque.c

build build/sim.elf: ld $builddir/gfx.o $builddir/main.o $
    $builddir/midi_backend.o $builddir/stubs/stub_wntr_midi.o $
    $builddir/src/currents/currents.o $builddir/src/flow/generated_flow.o $
    $builddir/src/flow/flow_io.o $builddir/src/flow/flow_runner.o $
    $builddir/src/flow/flow_nodes.o $
    $builddir/third_party/libwinter/wntr_deque.o

build $builddir/generated_build_info.c: runcmd_arg_out  | $
    build_info_always.phony
  cmd = python3 -m wintertools.build_info --config debug
  desc = Generate build info

build build_info_always.phony: phony

build ../src/flow/generated_flow.c: runcmd_arg_out  | $
    ../experimental/generator.py
  cmd = python3 ../experimental/generator.py
  desc = Generate ../src/flow/generated_flow.c

build format: phony
configure_args = 

rule configure
  command = /Users/stargirl/.pyenv/versions/3.9.1/bin/python3 configure.py $
      $configure_args
  description = Reconfigure with configure.py $configure_args
  generator = 1

build build.ninja: configure | configure.py
